<?xml version="1.0"?>
<robot name="arm" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Base link -->
  <link name="base_link">
    <visual>
      <geometry>
        <cylinder radius="0.1" length="0.05"/>
      </geometry>
      <material name="blue">
        <color rgba="0.0 0.0 1.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.1" length="0.05"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.2"/>
      <inertia ixx="0.0003875" ixy="0" ixz="0" iyy="0.0003875" iyz="0" izz="0.001"/>
    </inertial>
  </link>

  <!-- First arm link -->
  <link name="link_1">
    <visual>
      <geometry>
        <cylinder radius="0.05" length="0.3"/>
      </geometry>
      <material name="green">
        <color rgba="0.0 1.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.05" length="0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.00014375" ixy="0" ixz="0" iyy="0.00014375" iyz="0" izz="0.000125"/>
    </inertial>
  </link>

  <!-- Second arm link -->
  <link name="link_2">
    <visual>
      <geometry>
        <cylinder radius="0.05" length="0.3"/>
      </geometry>
      <material name="red">
        <color rgba="1.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.05" length="0.3"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.1"/>
      <inertia ixx="0.00014375" ixy="0" ixz="0" iyy="0.00014375" iyz="0" izz="0.000125"/>
    </inertial>
  </link>

  <!-- Third arm link -->
  <link name="link_3">
    <visual>
      <geometry>
        <cylinder radius="0.05" length="0.2"/>
      </geometry>
      <material name="yellow">
        <color rgba="1.0 1.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <cylinder radius="0.05" length="0.2"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.08"/>
      <inertia ixx="0.0000925" ixy="0" ixz="0" iyy="0.0000925" iyz="0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- Gripper link -->
  <link name="gripper_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.02"/>
      </geometry>
      <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="0.1 0.1 0.02"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.05"/>
      <inertia ixx="0.000021" ixy="0" ixz="0" iyy="0.000021" iyz="0" izz="0.000042"/>
    </inertial>
  </link>

  <!-- Joints -->
  <joint name="base_to_link_1" type="revolute">
    <parent link="base_link"/>
    <child link="link_1"/>
    <origin xyz="0 0 0.15" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="100" velocity="1.0" lower="-1.57" upper="1.57"/>
  </joint>

  <joint name="link_1_to_link_2" type="revolute">
    <parent link="link_1"/>
    <child link="link_2"/>
    <origin xyz="0 0 0.3" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="100" velocity="1.0" lower="-1.57" upper="1.57"/>
  </joint>

  <joint name="link_2_to_link_3" type="revolute">
    <parent link="link_2"/>
    <child link="link_3"/>
    <origin xyz="0 0 0.3" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="100" velocity="1.0" lower="-1.57" upper="1.57"/>
  </joint>

  <joint name="link_3_to_gripper" type="revolute">
    <parent link="link_3"/>
    <child link="gripper_link"/>
    <origin xyz="0 0 0.2" rpy="0 0 0"/>
    <axis xyz="0 0 1"/>
    <limit effort="50" velocity="1.0" lower="0" upper="1.57"/>
  </joint>

</robot>


import os
from launch import LaunchDescription
from launch.actions import ExecuteProcess, TimerAction
from launch_ros.actions import Node
from launch.substitutions import LaunchConfiguration
import time

def generate_launch_description():
    # Correct path to your URDF file
    urdf_file_path = os.path.expanduser("~/ros2_ws/src/workshop/urdf/arm.urdf")

    # Define the position for the robot (e.g., on the shelf or wherever you want it)
    robot_x = 1.0
    robot_y = 1.0
    robot_z = 1.25

    return LaunchDescription([

        # Wait for the /spawn_entity service to become available (polling)
        TimerAction(
            period=5.0,  # wait for 5 seconds for the service to become available
            actions=[
                ExecuteProcess(
                    cmd=['ros2', 'service', 'call', '/spawn_entity', 'std_srvs/Empty'],
                    output='screen'
                ),
            ]
        ),

        # Wait for Gazebo to be ready and spawn the URDF model
        TimerAction(
            period=5.0,  # wait for 5 more seconds to be sure Gazebo is up
            actions=[
                # Spawn the URDF model into the Gazebo world
                ExecuteProcess(
                    cmd=['ros2', 'run', 'gazebo_ros', 'spawn_entity.py',
                         '-file', urdf_file_path,
                         '-entity', 'arm', 
                         '-x', str(robot_x), '-y', str(robot_y), '-z', str(robot_z)],
                    output='screen'
                ),
            ]
        ),
    ])

